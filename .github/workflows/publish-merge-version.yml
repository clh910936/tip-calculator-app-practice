# # On a merge into beta, alpha, or main the following happens:
# # 1. The PR's version is read from package.json and the format is checked
# # 2. If the target branch was alpha or beta, the version number is appended with the branch name (ex 1.0.0-alpha)
# # 3. The package.json in the PR branch is temporarily updated with the new version number
#     # The update is temporary because we don't want that branch name in the package.json, keeping it clean leaves that open for a formal version release on a merge to main
# # 4. The new version is tagged and published to the repo

# name: Publish Version on Merge

# on:
#   pull_request:
#     branches:
#       - beta
#       - alpha
#       - main
#     types:
#       - closed

# jobs:
#   publish-official-tag:
#     if: github.event.pull_request.merged == true
#     runs-on: ubuntu-latest
#     permissions:
#       contents: write
#       packages: write
#       # pull-requests: write # Needed to comment on PRs

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Read package.json in PR branch
#         id: read-pr-package-json
#         run: |
#           pr_version=$(cat package.json | jq -r '.version')
#           echo "pr_version=$pr_version" >> $GITHUB_OUTPUT

#       - name: Extract PR branch version number
#         id: extract-version-number
#         run: |
#           pr_version="${{ steps.read-pr-package-json.outputs.pr_version }}"

#           if [[ $pr_version =~ ^([0-9]+(\.[0-9]+)*) ]]; then
#             pr_version_number="${BASH_REMATCH[0]}"
#             echo "pr_version_number=$pr_version_number" >> $GITHUB_OUTPUT
#           else
#             echo "Invalid 'version' format in package.json. Expected format"
#             exit 1
#           fi

#       - name: Determine new version
#         id: determine-new-version
#         run: |
#           version_number="${{ steps.extract-version-number.outputs.pr_version_number }}"
#           # if alpha or beta branch, append branch name to version number
#           if [[ ${{ github.base_ref }} =~ ^(alpha|beta)$ ]]; then
#             version_number="${{ steps.extract-version-number.outputs.pr_version_number }}-${{ github.base_ref }}"
#           fi

#           echo "version_number=$version_number" >> $GITHUB_OUTPUT


#       - name: Configure Git
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         run: |
#           git config --global user.name "${{ github.actor }}"
#           git config --global user.email "${{ github.actor }}@users.noreply.github.com"
#           # git checkout ${{ github.head_ref }}

#       # if the version was incremented, update the package.json in the PR branch and commit that
#       - name: Update PR version number and save to package.json
#         id: temp-package-json-update
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         run: |
#           version_number="${{ steps.determine-new-version.outputs.version_number }}"
#           jq --arg version_number "$version_number" '.version = $version_number' package.json > package.json.tmp && mv package.json.tmp package.json
#           cat package.json

#       - name: Push new tag
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         run: |
#           new_version="v${{ steps.determine-new-version.outputs.version_number }}"
#           git tag $new_version -m "Published from branch: ${{ github.head_ref }}"
#           git push origin HEAD
#           git push --tags

#       # Setup .npmrc file to publish to GitHub Packages
#       - uses: actions/setup-node@v3
#         with:
#           node-version: '18.x'
#           registry-url: 'https://npm.pkg.github.com'
#           # Defaults to the user or organization that owns the workflow file
#           scope: '@red-digital'
#       - run: |
#           # npm i
#           if [[ ${{ github.base_ref }} =~ ^(alpha|beta)$ ]]; then
#             # print npm publish tag command
#             echo "npm publish --tag ${{ github.base_ref }}"
#             # npm publish --tag ${{ github.base_ref }}
#           else
#             echo "npm publish --tag ${{ github.base_ref }}"
#             # npm publish
#           fi
#         env:
#           NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
