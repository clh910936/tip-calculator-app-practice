# On a release being published this will:
# 1. Update the package.json version to match the release tag
# 2. Publish the new version to npm

name: Publish Package Version on Release

on:
  release:
    types: [published]

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.5.2
        with:
          ref: main
          # the ssh key below is tied to a deployment key that has write access
          # this should allow bypassing branch protections to push to main
          ssh-key: ${{secrets.AUTORELEASE_GHA_SSH}}
      - name: Configure Git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git checkout ${{ github.head_ref }}
      - name: Update package.json version
        run: |
          tag_name=${{ github.event.release.tag_name }}
          # regex removes the leading 'v' from the tag name
          raw_version_number=${tag_name#"v"}
          echo "raw_version_number: $raw_version_number"
          jq --arg raw_version_number "$raw_version_number" '.version = $raw_version_number' package.json > package.json.tmp && mv package.json.tmp package.json
          cat package.json

          git add package.json
          git commit -m "Updating package.json to $raw_version_number for release"
          git push

      # # Setup .npmrc file to publish to GitHub Packages
      # - uses: actions/setup-node@v3
      #   with:
      #     node-version: '18.x'
      #     registry-url: 'https://npm.pkg.github.com'
      #     # Defaults to the user or organization that owns the workflow file
      #     scope: '@red-digital'
      # - run: npm i
      # - run: echo "npm publish --tag"
      #   env:
      #     NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
