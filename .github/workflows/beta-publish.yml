name: Publish beta development tag

on:
  pull_request:
    branches:
      - beta

jobs:
  read-package-json:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.read-json.outputs.version }}
      commit_message: ${{ steps.update-package-json.outputs.commit_message }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Fetch latest changes
        run: git fetch --prune

      - name: Read package.json
        id: read-json
        run: |
          echo "::set-output name=version::$(cat package.json | grep -oP '(?<="version": ")[^"]+')"
          echo "Version: ${{ steps.read-json.outputs.version }}"

      - name: Determine new version
        id: determine-version
        run: |
          version="${{ steps.read-json.outputs.version }}"
          
          if [[ $version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            version_parts=(${version//./ })
            middle_part=$((version_parts[1] + 1))
            new_version="${version_parts[0]}.${middle_part}.${version_parts[2]}"
          elif [[ $version =~ ^[0-9]+\.[0-9]+\.[0-9]+-beta\.[A-Za-z0-9]+$ ]]; then
            new_version="${version%-*}"
            echo "$new_version"
          else
            echo "Invalid version format, needs to be dd.dd.dd OR dd.dd.dd-beta.{GITHUB_SHA}"
            exit 1
          fi
          
          echo "::set-output name=new_version::$new_version"

      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git checkout ${{ github.head_ref }}

      - name: Update package.json
        id: update-package-json
        run: |
          github_sha="${{ github.sha }}"
          trimmed_sha="${github_sha::5}"

          new_version="${{ steps.determine-version.outputs.new_version }}-beta.${trimmed_sha}"
          
          jq --arg new_version "$new_version" '.version = $new_version' package.json > package.json.tmp && mv package.json.tmp package.json
          cat package.json

      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git add package.json
          git commit -m "Updating dev version"
          git push