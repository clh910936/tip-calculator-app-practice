# On a PR into `beta` this:
# - Updates the package.json version with a new beta version, ending in the last 5 of the commit sha
# - Pushes the new version to the PR branch
# - Creates a new tag with the new version
# - Publishes the tag

name: Publish beta development tag

on:
  pull_request:
    branches:
      - beta

jobs:
  publish-tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      pull-requests: write # Needed to comment on PRs

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Print
        run: |
          echo "${{toJSON(github.event)}}"

      - name: Fetch latest changes
        run: git fetch --prune

      - name: Read package.json in PR branch
        id: read-json-pr
        run: |
          pr_version=$(cat package.json | jq -r '.version')
          echo "pr_version=$pr_version" >> $GITHUB_OUTPUT

      - name: Read package.json in target branch
        id: read-json-target
        run: |
          target_branch="${{ github.event.pull_request.base.ref }}"
          git checkout $target_branch
          target_version=$(cat package.json | jq -r '.version')
          echo "target_branch_version=$target_version" >> $GITHUB_OUTPUT

      - name: Compare versions
        id: compare-versions
        run: |
          version_pr="${{ steps.read-json-pr.outputs.pr_version }}"
          version_target="${{ steps.read-json-target.outputs.target_branch_version }}"

          if [[ $version_pr != $version_target ]]; then
            echo "The 'version' key in package.json is different between the PR branch and the main branch."
            echo "Version in PR branch: $version_pr"
            echo "Version in main branch: $version_target"
          else
            echo "The 'version' key in package.json is the same between the PR branch and the main branch."
            echo "Version: $version_pr"
          fi

      - name: Read current package.json version
        id: find-existing-version
        run: |
          version=$(cat package.json | grep -oP '(?<="version": ")[^"]+')
          echo $version
          echo "existing_version=$version" >> $GITHUB_OUTPUT
      - name: Determine new version
        id: determine-new-version
        run: |
          version="${{ steps.find-existing-version.outputs.existing_version }}"
          # Existing version is of format vdd.dd.dd, incremented the last digit
          if [[ $version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            version_parts=(${version//./ })
            middle_part=$((version_parts[1] + 1))
            new_version_number="${version_parts[0]}.${middle_part}.${version_parts[2]}"
          # Existing version is of format vdd.dd.dd-beta.{GITHUB_SHA}, extracts the dd.dd.dd part, does not increment
          elif [[ $version =~ ^[0-9]+\.[0-9]+\.[0-9]+-beta\.[A-Za-z0-9]+$ ]]; then
            new_version_number="${version%-*}"
          else
            echo "Invalid version format, needs to be dd.dd.dd OR dd.dd.dd-beta.{GITHUB_SHA}"
            exit 1
          fi
          github_sha="${{ github.sha }}"
          trimmed_sha="${github_sha::5}"

          # append the last 5 of the commit sha to the version
          new_version="${new_version_number}-beta.${trimmed_sha}"

          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Configure Git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git checkout ${{ github.head_ref }}

      - name: Update package.json
        id: update-package-json
        run: |
          new_version="${{ steps.determine-new-version.outputs.new_version }}"
          jq --arg new_version "$new_version" '.version = $new_version' package.json > package.json.tmp && mv package.json.tmp package.json
          cat package.json

      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git add package.json
          git commit -m "Updating dev version to ${{ steps.determine-new-version.outputs.new_version }}"
          git push
      - name: Push new tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          new_version="v${{ steps.determine-new-version.outputs.new_version }}"
          git tag $new_version -m "Publishing $new_version"
          git push origin HEAD
          git push --tags
      # - name: Comment version on PR
      #   uses: thollander/actions-comment-pull-request@v2
      #   with:
      #     message: |
      #       New dev version published: [v${{ steps.determine-new-version.outputs.new_version }}](${{github.event.pull_request.base.repo.html_url}}/releases/tag/v${{ steps.determine-new-version.outputs.new_version }})
      #     pr_number: ${{ github.event.number }}
      # # Setup .npmrc file to publish to GitHub Packages
      # - uses: actions/setup-node@v3
      #   with:
      #     node-version: '16.x'
      #     registry-url: 'https://npm.pkg.github.com'
      #     # Defaults to the user or organization that owns the workflow file
      #     scope: '@red-digital'
      # - run: npm i
      # - run: npm publish --tag beta
      #   env:
      #     NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
