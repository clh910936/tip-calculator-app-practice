name: Publish beta development tag

on:
  pull_request:
    branches:
      - beta

jobs:
  read-package-json:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Fetch latest changes
        run: git fetch --prune

      - name: Read current package.json version
        id: find-existing-version
        run: |
          version=$(cat package.json | grep -oP '(?<="version": ")[^"]+')
          echo $version
          echo "existing_version=$version" >> $GITHUB_OUTPUT
      - name: Determine new version
        id: determine-new-version
        run: |
          version="${{ steps.find-existing-version.outputs.existing_version }}"
          if [[ $version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            version_parts=(${version//./ })
            middle_part=$((version_parts[1] + 1))
            new_version_number="${version_parts[0]}.${middle_part}.${version_parts[2]}"
          elif [[ $version =~ ^[0-9]+\.[0-9]+\.[0-9]+-beta\.[A-Za-z0-9]+$ ]]; then
            new_version_number="${version%-*}"
          else
            echo "Invalid version format, needs to be dd.dd.dd OR dd.dd.dd-beta.{GITHUB_SHA}"
            exit 1
          fi
          echo $new_version_number
          github_sha="${{ github.sha }}"
          trimmed_sha="${github_sha::5}"

          new_version="${new_version_number}-beta.${trimmed_sha}"
          
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Configure Git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git checkout ${{ github.head_ref }}

      - name: Update package.json
        id: update-package-json
        run: |

          new_version="${{ steps.determine-new-version.outputs.new_version }}"
          jq --arg new_version "$new_version" '.version = $new_version' package.json > package.json.tmp && mv package.json.tmp package.json
          cat package.json

      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git add package.json
          git commit -m "Updating dev version to ${{ steps.determine-new-version.outputs.new_version }}"
          git push
      - name: Push new tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          new_version="v${{ steps.determine-new-version.outputs.new_version }}"
          git tag $new_version -m "Publishing $new_version"
          git push origin HEAD
          git push --tags
      - name: Setup for publish
        uses: actions/checkout@v3
      # Setup .npmrc file to publish to GitHub Packages
      - uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          registry-url: 'https://npm.pkg.github.com'
          # Defaults to the user or organization that owns the workflow file
          scope: '@octocat'
      - run: npm ci
      - run: npm publish --tag beta
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}